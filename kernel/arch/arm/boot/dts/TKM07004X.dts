/*
 * ZMP1107_EVB board rgb lcd dts
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

/dts-v1/;
#include "zmp1107.dtsi"

/ {
    compatible = "zlgmcu,zmp110x";
    model = "ZMP1107_EVB";
	version = "V1.0.00";

/*
    leds {
		compatible = "gpio-leds";
		pinctrl-names = "default";
		pinctrl-0 = <&run_led_pins>;
        status = "okay";
		led0: cpu {
			label = "cpu";
			gpios = <&gpio 3 1>;
			default-state = "on";
			linux,default-trigger = "heartbeat";
		};
	};
*/
    ramdisk:ramdisk{
        compatible = "zlgmcu,zmp110x-ramdisk";
        memory-region = <&dma_reserved>;
        status = "disable";
    };

    minipcie_rst:minipcie_rst{
        compatible = "TKM,Set-Minipcie-Gpio";
        pinctrl-names = "default";
        pinctrl-0 = <&minipcie_reset_pins>;
        reset-gpios = <&gpio 41 0>;
    };    
/*
    watchdog: watchdog {
        compatible = "linux,wdt-gpio";
        gpios = <&gpio 3 GPIO_ACTIVE_LOW>;
        pinctrl-names = "default";
        pinctrl-0 = <&wdt_pins>;
        hw_algo = "toggle";
        hw_margin_ms = <1500>;
        always-running;
    };
*/
	
	wdt: wdt {                                                                                                                                                             
	    compatible = "cat82x-gpio-wdt";
	    gpios = <&gpio 3 GPIO_ACTIVE_LOW>;
		pinctrl-names = "default";
		pinctrl-0 = <&wdt_pins>;
		hw_margin_ms = <700>;
	};


    i2c@0 {
        compatible = "i2c-gpio";
        pinctrl-names = "default";
        pinctrl-0 = <&i2c0_pins>;
        gpios = <&gpio 32 0 /* sda */
                &gpio 31 0 /* scl */
                >;
        i2c-gpio,sda-open-drain;
        i2c-gpio,scl-open-drain;
        i2c-gpio,delay-us = <2>;    /* ~100 kHz */
        #address-cells = <1>;
        #size-cells = <0>;

        gt911@5d {
	    compatible = "goodix,gt911";
	    reg = <0x5d>;
	    pinctrl-names = "default";
        pinctrl-0 = <&touch_pins>;
        irq-gpio = <&gpio 26 1>;
        reset-gpio = <&gpio 33 1>;
        interrupts = <26 2>;
        interrupt-parent = <&gpio>;
        status = "okay";
        
        goodix,cfg-group0 = [         
            ff 20 03 e0 01 05 0d 00 01 08 28 05 50 
            32 03 05 00 00 00 00 00 00 00 00 00 00 
            00 8b 2a 0c 17 15 31 0d 00 00 02 ba 03 
            2c 00 00 00 00 00 03 00 00 00 00 00 0f 
            41 94 c5 02 07 00 00 04 9b 11 00 77 17 
            00 5c 1f 00 48 2a 00 3b 38 00 3b 00 00 
            00 00 00 00 00 00 00 00 00 00 00 00 00 
            00 00 00 00 00 00 00 00 00 00 00 00 00
            00 00 00 00 00 00 00 00 02 04 06 08 0a 
            0c 0e 10 12 14 16 18 ff ff 00 00 00 00 
            00 00 00 00 00 00 00 00 00 00 00 00 00 
            02 04 06 08 0a 0c 0f 10 12 13 16 18 1c 
            1d 1e 1f 20 21 22 24 ff ff ff ff ff 00 
            00 00 00 00 00 00 00 00 00 00 00 00 00 
            00 00 59 01
        ];
        
	};  

    
    rtc@51 {
		compatible = "nxp,pcf85063";
		reg = <0x51>;
	}; 

    bu21029@40 {
			compatible = "rohm,bu21029";
			reg = <0x40>;
            pinctrl-names = "default";
            pinctrl-0 = <&touch_pins>;
			interrupt-parent = <&gpio>;
			interrupts = <26 2>;
			reset-gpios = <&gpio 33 GPIO_ACTIVE_LOW>;
			rohm,x-plate-ohms = <600>;
			touchscreen-size-x = <800>;
			touchscreen-size-y = <480>;
			touchscreen-max-pressure = <4095>;
		}; 
    };                                                                                                                                                                                         

};
/*--------------------------------------ZMP110x 片内外设-----------------------------------------*/
&dac {
    /*pinctrl-names = "default";
     pinctrl-0 = <&speak_pins>;
    
    ** speak-down,linein-detect,hp-mute,hp-detect
    ** 1 means enable these four function
    ** 0 means disable these four function
    */
    speak-down = <1>;
    linein-detect = <0>;
    hp-mute = <0>;
    hp-detect = <0>;
    /*speak-gpios = <&gpio 90 1>;
    the level of speak-gpios votage for power on audio: 0=low, 1=high*/
    speak-gpios-en = <1>;
    //linein-gpios = <&gpio 54 1>;    
    status = "okay";
};

&encrypt{
   /*
    * encrypt-mode
    * 0 = CRYPTO_SINGLE_GROUP_MODE ; 1 = CRYPTO_MULTI_GROUP_MODE
    */
    encrypt-mode = <1>;
    status = "okay";
};

&gui {
    status = "okay";
};

&rtc {
	/*
	 * rtc osc_source_select, 1 means INTERNAL RC OSC, 0 means EXTERNAL XTAL
	 * if internal RC OSC is used to generate 32KH,time adjustment should be setting.(basic unit: ms)
	 */
	osc-select = <0>;
	//adjust-time = <120000>;
	status = "okay";
};


&saradc{
    /* SAR ADC VREF selection
    * 0:To select AVCC 3.3V as VREF for SAR ADC.
    * 1:To select 3.0V generated from BGR as VREF for SAR ADC.
    */
    vref-select = <0>;
    /*
    * 0:To disable BAT voltage divider. 
    * 1:To enable BAT voltage divider divided by 2.
    */
    battery-divider = <1>;
    /*
    * Sampling number
    * Read the sampling data for N times and then calculate the average value.
    * N ranges from 1 to 7.
    */
     sampling-num = <3>;
     status = "okay";
};

&uart0 {
    pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;
    status = "okay";
};

&uart1 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart1_pins &rs485_dir_pins>;
	dir-gpios = <&gpio 40 1>; 
	status = "okay";
};


&uart2 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart2_pins>;
	status = "okay";
};


&usb {
    status = "okay"; 
};

&vdecoder {
    status = "okay";
};

&vencoder {
    status = "okay";
};

&watchdog {
	/*max feed dog time = 357s, default setting time = 10s. */
    def_heartbeat = <10>;
    status = "okay";
};


/*-----------------------------------------------板载外设------------------------------------------------*/
&mmc1 {
    bus-width = <0x4>;
    max-frequency = <120000000>;
    pinctrl-names = "default";
    pinctrl-0 = <&mci1_pins &sd_detect_gpios>;
    detect-gpio = <&gpio 121 1>; 
    cap-sd-highspeed;
    status = "okay";
};

&spi0 {
    pinctrl-names = "default";
    pinctrl-0 = <&spiflash_pins>;
    cs-gpios = <&gpio 12 1>;
    spi-bus-frequency = <80000000>;
    /*
     * cap-spi-highspeed;
     * if defined, means high speed controller(Maximum 80M/s);
     * if not, means normal speed controller(below 60M/s)
     */
    cap-spi-highspeed;
    status = "okay";
};
&spif0 {
    compatible = "zlgmcu,zmp-spinand";//nand flash
	/* spi flash data bus width:
	** 1 means 1 wire mode.
	** 2 means 2 wire mode
	** 4 means 4 wire mode.
	** default: 4 wire mode.
	**/
	bus-width = <4>;
	status = "okay";

    IS38SML01G1: spi-nandflash@1 { 
		compatible = "ISSI,IS38SML01G1";
		nandflash-name = "IS38SML01G1";
		
		/* spiflash IS38SML01G1 */
		nandflash-jedec-id = <0xc8217f7f>; 
		nandflash-ext-id = <0>;
		nandflash-planecnt = <1>;
		nandflash-page_size = <2048>;
		nandflash-page_per_block = <64>;
		nandflash-block_size = <0x20000>;
		nandflash-n_blocks = <1024>;
		nandflash-oob_size = <64>;		  
		nandflash-oob_up_skiplen = <0>;
		nandflash-oob_seglen = <8>;
		nandflash-oob_down_skiplen = <8>;	
		nandflash-oob_seg_perpage = <4>;
		nandflash-oob_vail_data_offset = <8>;

		/*
		* flags = SFLAG_DUAL_READ|SFLAG_QUAD_READ|SFLAG_QUAD_WRITE
		* = 0x8A0
		*/
		nandflash-flags = <0x8A0>;
		nandflash-b_wip = <0>;		
		nandflash-b_wel = <1>;
		nandflash-b_efail = <2>;
		nandflash-b_pfaile = <3>;
		/*nandflash-b_qe = <8>; 	*/

		/* bad block flag ops */
		nandflash-badflag_offs = <0>;
		nandflash-badflag_len = <1>;

		/*
		 * 0x00000000:scan first one page
		 * 0x00008000:scan first two page
		 * 0x00010000:scan last  one page
		 * 0x00018000:scan last  two page
		 * 0x01000000:scan first and last page
		 */
		nandflash-badflag_option = <0x00008000>;	
		
		status = "okay";
	};

    MX35LF1GE4AB: spi-nandflash@0 { 
		compatible = "MXIC,MX35LF1GE4AB";
		nandflash-name = "MX35LF1GE4AB";
		
		/* spiflash MX35LF1GE4AB */
		nandflash-jedec-id = <0xc212c212>; 
		nandflash-ext-id = <0>;
		nandflash-page_size = <2048>;
		nandflash-page_per_block = <64>;
		nandflash-block_size = <0x20000>;
		nandflash-n_blocks = <1024>;
		nandflash-oob_size = <64>;		  
		nandflash-oob_up_skiplen = <0>;
		nandflash-oob_seglen = <12>;
		nandflash-oob_down_skiplen = <4>;
		nandflash-oob_seg_perpage = <4>;
		nandflash-oob_vail_data_offset = <4>;

		/*
		* flags = SFLAG_DUAL_READ|SFLAG_QUAD_READ|SFLAG_QUAD_WRITE
		* = 0x8A0
		*/
		nandflash-flags = <0x0>;

		/* status reg bit map */
		nandflash-b_wip = <0>;		
		nandflash-b_wel = <1>;		
		nandflash-b_efail = <2>;		
		nandflash-b_pfail = <3>;		
		nandflash-b_bp2 = <4>;		
		nandflash-b_bp3 = <5>;		
		nandflash-b_bp4 = <6>;		
		nandflash-b_srp0 = <7>; 	
		
		nandflash-b_qe = <8>; 	
		nandflash-b_srp1 = <9>;		
		nandflash-b_lb = <10>;		

		nandflash-b_cmp = <14>; 	
		nandflash-b_sus = <15>; 		

		/* bad block flag ops */
		nandflash-badflag_offs = <0>;
		nandflash-badflag_len = <1>;
		
		/*
		 * 0x00000000:scan first one page
		 * 0x00008000:scan first two page
		 * 0x00010000:scan last  one page
		 * 0x00018000:scan last  two page
		 * 0x01000000:scan first and last page
		 */
		nandflash-badflag_option = <0x01000000>;
		status = "okay";
	};

    GD5F1GQ5UEY1G: spi-nandflash@5 { 

		compatible = "GD,GD5F1GQ5UEY1G";
		nandflash-name = "GD5F1GQ5UEY1G";

		/* spiflash GD5F1GQ5UEY1G */
		nandflash-jedec-id = <0xc851c851>; 
		nandflash-ext-id = <0>;
		nandflash-planecnt = <1>;
		nandflash-page_size = <2048>;
		nandflash-page_per_block = <64>;
		nandflash-block_size = <0x20000>;
		nandflash-n_blocks = <1024>;
		nandflash-oob_size = <64>;		  
		nandflash-oob_up_skiplen = <0>;
		nandflash-oob_seglen = <12>;
		nandflash-oob_down_skiplen = <4>;	
		nandflash-oob_seg_perpage = <4>;
		nandflash-oob_vail_data_offset = <4>;

		/*
		* flags = SFLAG_DUAL_READ|SFLAG_QUAD_READ|SFLAG_QUAD_WRITE
		* = 0x8A0
		*/
		nandflash-flags = <0x8A0>;

		nandflash-b_wip = <0>;		

		nandflash-b_qe = <8>; 	

		/* bad block flag ops */

		nandflash-badflag_offs = <0>;
		nandflash-badflag_len = <1>;

		/*

		 * 0x00000000:scan first one page
		 * 0x00008000:scan first two page
		 * 0x00010000:scan last  one page
		 * 0x00018000:scan last  two page
		 * 0x01000000:scan first and last page
		 */

		nandflash-badflag_option = <0x01000000>;	
		status = "okay";

	};
};
/*
&i2c0 {
    pinctrl-names = "default";
    pinctrl-0 = <&i2c0_pins>;

    clock-frequency = <312000>;
    //clock-frequency = <117000>;
    sda-delay = <100>;
    status = "okay";
	#address-cells = <1>;
	#size-cells = <0>;
   
    gt911@5d {
	    compatible = "goodix,gt911";
	    reg = <0x5d>;
	    pinctrl-names = "default";
        pinctrl-0 = <&touch_pins>;
        irq-gpio = <&gpio 26 1>;
        reset-gpio = <&gpio 33 1>;
        interrupts = <26 2>;
        interrupt-parent = <&gpio>;
        status = "okay";
        
        goodix,cfg-group0 = [         
            ff 20 03 e0 01 05 0d 00 01 08 28 05 50 
            32 03 05 00 00 00 00 00 00 00 00 00 00 
            00 8b 2a 0c 17 15 31 0d 00 00 02 ba 03 
            2c 00 00 00 00 00 03 00 00 00 00 00 0f 
            41 94 c5 02 07 00 00 04 9b 11 00 77 17 
            00 5c 1f 00 48 2a 00 3b 38 00 3b 00 00 
            00 00 00 00 00 00 00 00 00 00 00 00 00 
            00 00 00 00 00 00 00 00 00 00 00 00 00
            00 00 00 00 00 00 00 00 02 04 06 08 0a 
            0c 0e 10 12 14 16 18 ff ff 00 00 00 00 
            00 00 00 00 00 00 00 00 00 00 00 00 00 
            02 04 06 08 0a 0c 0f 10 12 13 16 18 1c 
            1d 1e 1f 20 21 22 24 ff ff ff ff ff 00 
            00 00 00 00 00 00 00 00 00 00 00 00 00 
            00 00 59 01
        ];
        
	};  

    
    rtc@51 {
		compatible = "nxp,pcf85063";
		reg = <0x51>;
	};

    bu21029@40 {
			compatible = "rohm,bu21029";
			reg = <0x40>;
            pinctrl-names = "default";
            pinctrl-0 = <&touch_pins>;
			interrupt-parent = <&gpio>;
			interrupts = <26 2>;
			reset-gpios = <&gpio 33 GPIO_ACTIVE_LOW>;
			rohm,x-plate-ohms = <600>;
			touchscreen-size-x = <800>;
			touchscreen-size-y = <480>;
			touchscreen-max-pressure = <4095>;
		}; 
  
};
*/

&i2c1 {
    pinctrl-names = "default";
    pinctrl-0 = <&i2c1_pins>;

//    clock-frequency = <312000>;
    clock-frequency = <100000>;
    sda-delay = <300>;
    status = "okay";
	#address-cells = <1>;
	#size-cells = <0>;

    ds2460@40{
		compatible = "zhiyuan,ds2460";
		reg = <0x40>;
	};
    
};


&ethernet {
    pinctrl-names = "default";
    pinctrl-0 = <&ethernet_pins_rmii &phy_reset_pins>;
    reset-gpios = <&gpio 42 1>;
//   mac-address = [00 04 9F 01 1B B0];
    status = "okay";
};
/*
&pwm3 {
    pinctrl-names = "default";
    pinctrl-0 = <&pwm3_pins>;
    period-ns = <10000000>;
    duty-ns = <10000000>;
    pwm-enable = <1>;
    status = "okay";
};

&pwm4 {
    pinctrl-names = "default";
    pinctrl-0 = <&pwm4_pins>;
    period-ns = <1000000>;
    duty-ns = <500000>;
    pwm-enable = <0>;
    status = "okay";
};
*/

&pwm1 {
    pinctrl-names = "default";
    pinctrl-0 = <&pwm1_pins>;
    period-ns = <10000000>;
    duty-ns = <10000000>;
    pwm-enable = <1>;
    boot_initd = <1>;
    status = "okay";
};

&pwm2 {
    pinctrl-names = "default";
    pinctrl-0 = <&pwm2_pins>;
    period-ns = <1000000>;
    duty-ns = <500000>;
    pwm-enable = <0>;
    status = "okay";
};

&lcdc {
    pinctrl-names = "default";
    //pinctrl-0 = <&lcd_reset_pins>; //lcd_pins for rgb lcd, lcd_reset_pins only for mipi lcd
    pinctrl-0 = <&lcd_pins>;
    
    lcd-logo-width = <800>;
    lcd-logo-height = <480>;
    //[fmt1:fmt0] 00 16bits input(RGB565 or BGR565)
    //[fmt1:fmt0] 01 24bits input(RGB888 or BGR888)
    //[fmt1:fmt0] 10 or 11 32bits input(ARGB888 ABGR888 RGBA888 BGRA888)
    lcd-logo-fmt0 = <1>;
    lcd-logo-fmt1 = <0>;
    lcd-logo-rgb-seq = <1>; //0 for BGR, 1 for RGB  -> output seq ;use for framebuffer rgbseq
    
    lcd-fb-type = <1>; //0:single buffer; 1:double buffer

    lcd-alarm-empty = <128>;//FIFO empty
    lcd-alarm-full = <510>;//FIFO full
    lcd-dma-mode = <1>;
    //lcd-dummy-seq = <0>; //for 8bit rgb panel set
    //lcd-rgb-seq-sel = <0>;
    //lcd-rgb-odd-seq = <0>;
    //lcd-rgb-even-seq = <0>;
    lcd-rgb-tpg-sel = <1>;
    lcd-vpage-en = <0>; //don't support vpage function in driver
    lcd-blank-sel = <0>;
    lcd-pos-blank-level = <0>;
    lcd-neg-blank-level = <0>;
    lcd-rgb-bg-color = <0x00000000>;
    lcd-vh-delay-en = <0>;
    lcd-vh-delay-cycle = <0>;
    lcd-v-unit = <0>;
    lcd-alert-line = <30>;

    status = "okay";
 /*       
    LN48272: lcd-panel@6 { //for RGB panel setting
        panel-if = <0>;
        panel-rgb-seq = <1>; 
        panel-pclk-div = <15>; 
        panel-width = <800>;
        panel-thpw = <1>;
        panel-thb = <46>;
        panel-thf = <100>;
        panel-height = <480>;
        panel-tvpw = <1>;
        panel-tvb = <23>;
        panel-tvf = <22>;
        panel-pclk-pol = <0>; //0:pos, 1:neg
        panel-hsync-pol = <0>;
        panel-vsync-pol = <0>;
        panel-vogate-pol = <0>;
        panel-bus-width = <3>; 
        panel-sync-mode = <1>;
        status = "okay";
    };  */

    LN80480: lcd-panel@6 { //for RGB panel setting
        panel-if = <0>;
        panel-rgb-seq = <1>; 
        panel-pclk-div = <20>;
        panel-width = <800>;
        panel-thpw = <14>;
        panel-thb = <30>;
        panel-thf = <160>;
        panel-height = <480>;
        panel-tvpw = <4>;
        panel-tvb = <23>;
        panel-tvf = <10>;
        panel-pclk-pol = <0>; //0:pos, 1:neg
        panel-hsync-pol = <1>;
        panel-vsync-pol = <1>;
        panel-vogate-pol = <0>;
        panel-bus-width = <3>;
        panel-sync-mode = <1>;
        status = "okay";
    };   
/*
     LN80480: lcd-panel@6 { //for RGB panel setting
        panel-if = <0>;
        panel-rgb-seq = <1>; 
        panel-pclk-div = <15>;
        panel-width = <800>;
        panel-thpw = <4>;
        panel-thb = <46>;
        panel-thf = <150>;
        panel-height = <480>;
        panel-tvpw = <2>;
        panel-tvb = <23>;
        panel-tvf = <120>;
        panel-pclk-pol = <0>; //0:pos, 1:neg
        panel-hsync-pol = <0>;
        panel-vsync-pol = <0>;
        panel-vogate-pol = <0>;
        panel-bus-width = <3>;
        panel-sync-mode = <1>;
        status = "okay";
    }; */
};


&gpio {
    /* zmp,function sharepin func index according to table 2-1 sharepin-list */
    /* index: 0: PIN default func, 1: FUNCTION1, 2: FUNCTION2, 3: FUNCTION3, 4: FUNCTION4 */
    /* zmp,pull config value bit[31:24]--slew rate, bit[23:16]--ie, bit[15:8]--drive, bit[7:0]--pupd config */
    /* bit[31:24]--slew rate, 0: slow, 1: fast */
    /* bit[23:16]--ie, input enable, 0: disable, 1: enable */
    /* bit[15:8]--drive, drive strength, 4levels value: 0x0-0x3 */
    /* bit[7:0]--bit[7]: open drain 0:disable, 1:enable (only for gpio31/32);
				pupd config, bit[6:4] 1:enable/ 0:disable, bit[3:0] 0:select PU /1:select PD */   
 /*    
    pwm0_pins: pwm0_pins {
        zmp,pins = <3>;
        zmp,function = <1>;
        zmp,pull = <0x01011110>;
    };   */

    minipcie_reset_pins:minipcie_reset_pins {
        zmp,pins = <41>;
        zmp,function = <0>;
        zmp,pull = <0x01001110>;
    };    

    wdt_pins:wdt_pins {
        zmp,pins = <3>;
        zmp,function = <0>;
        zmp,pull = <0x01001110>;
    };
/*
    pwm3_pins: pwm3_pins {
        zmp,pins = <27>;
        zmp,function = <2>;
        zmp,pull = <0x01011110>;
    };
 
    pwm4_pins: pwm4_pins {
        zmp,pins = <28>;
        zmp,function = <2>;
        zmp,pull = <0x01011110>;
    };     
*/

    pwm1_pins: pwm1_pins {
        zmp,pins = <38>;
        zmp,function = <2>;
        zmp,pull = <0x01011110>;
    };
 
    pwm2_pins: pwm2_pins {
        zmp,pins = <39>;
        zmp,function = <2>;
        zmp,pull = <0x01011110>;
    };  

    sd_detect_gpios: sd_detect_gpios {
	    //zmp,pins = <80>;
        zmp,pins = <121>;
	    zmp,function = <0>;
        zmp,pull = <0x01010011>;
    };

    run_led_pins: run_led_pins {
	    zmp,pins = <3>;
	    zmp,function = <0>;
        zmp,pull = <0x01000310>;/* 上拉输出 */
    };
	
	rs485_dir_pins: rs485_dir_pins {
		zmp,pins = <40>;
		zmp,function = <0>;
		zmp,pull = <0x01000311>;
	};

	phy_reset_pins: phy_reset_pins {
		zmp,pins = <42>;		
	    zmp,function = <0>;
        zmp,pull = <0x01000010>;
    };
/*
    i2c0_pins: i2c0_pins {
        zmp,pins = <31 32>;
        zmp,function = <1>;
        zmp,pull = <0x01010380>;// i2c0的引脚改为开漏输出 
    };  */

    i2c0_pins: i2c0_pins {
        zmp,pins = <31 32>;
        zmp,function = <0>;
        zmp,pull = <0x01010380>;/* i2c0的引脚改为开漏输出 */
    };

    i2c1_pins: i2c1_pins {
        zmp,pins = <27 28>;
        zmp,function = <3>;
        zmp,pull = <0x01010110>;
    };

    touch_pins: gt911_pins {
        zmp,pins = <26 33>;
        zmp,function = <0>;
        zmp,pull = <0x01010000 0x01000110>;//71->INT:浮空输入，73->RST:下拉输出
    };

    mci1_pins: mci1_pins {
        zmp,pins = <43 44 45 46 47 48>;
        zmp,function = <1>;
        zmp,pull = <0x10010 0x10000 0x10010 0x10010 0x10010 0x10010>; /* 4 line */
    };
/*
    mci2_pins: mci2_pins {
        zmp,pins = <91 92 93 94 95 96>;
        zmp,function = <2 2 3 3 3 3>;
        zmp,pull = <0x01010010 0x01010010 0x01010010 0x01010010 0x01010010 0x01010010>;
    };
*/
    spiflash_pins: spiflash_pins {
        zmp,pins = <12 67 68 69 70>; /* 4 LINE mode, 12 is spi nor cs*/
        zmp,function = <1 0 0 0 0>;
        zmp,pull = <0x01010010>;
    };

   lcd_pins: lcd_pins {
        zmp,pins = <71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98>;
        zmp,function = <1>;
        zmp,pull = <0x01010310>;
    };
    
 /*   
    lcd_reset_pins: lcd_reset_pins {
	    zmp,pins = <77>;
	    zmp,function = <0>;
        zmp,pull = <0x01000310>;
    };      */

    uart0_pins: uart0_pins {
        zmp,pins = <1 2>;
        zmp,function = <1>;
        zmp,pull = <0x01010010>;
    };
    
    uart1_pins: uart1_pins {
		zmp,pins = <36 37>;
		zmp,function = <2 3>;
		zmp,pull = <0x01010010 0x01010010>;
	};

    uart2_pins: uart2_pins {
		zmp,pins = <34 35>;
		zmp,function = <2>;
		zmp,pull = <0x01010010>;
	};

    ethernet_pins_rmii: ethernet_pins_rmii {
		zmp,pins 		= <10 11 13 14 15 19 20 23 24 49>;
        zmp,function 	= <1>;
        zmp,pull = <0x01010011 0x01010010 0x01010011 0x01010011 0x01010011 0x01010011 0x01010011 0x01010011 0x01010011 0x01010110>;
    };
};
