/*
 * ZMP1107_EVB board rgb lcd dts
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

/dts-v1/;
#include "zmp1107.dtsi"
#include "zmp110x_lcd.dtsi"
#include "zmp110x_spi_nor.dtsi"

/ {
    compatible = "zlgmcu,zmp110x";
    model = "ZMP1107_EVB";
	version = "V1.0.00";


    leds {
		compatible = "gpio-leds";
		pinctrl-names = "default";
		pinctrl-0 = <&run_led_pins>;
        status = "okay";
		led0: cpu {
			label = "cpu";
			gpios = <&gpio 3 1>;
			default-state = "on";
			linux,default-trigger = "heartbeat";
		};
	};

    mmc2_pwrseq: usdhc2_pwrseq {
        pinctrl-names = "default";
        pinctrl-0 = <&sdio_wifi_rst_pins>;
        compatible = "mmc-pwrseq-simple";
        reset-gpios = <&gpio 98 1>;
		post-power-on-delay-ms = <120>;
        status = "okay";
    };
        
    ramdisk:ramdisk{
        compatible = "zlgmcu,zmp110x-ramdisk";
        memory-region = <&dma_reserved>;
        status = "disable";
    };

    adkeys: adkeys {
		compatible = "zlgmcu,zmp110x-adckeys";
		status = "disable";
};

    //使用BEEP & LED的GPIO
    gpiokeys {
        compatible = "gpio-keys";
        pinctrl-names = "default";
        pinctrl-0 = <&gpio_keys>;
        #address-cells = <1>;
        #size-cells = <0>;
        autorepeat;
        status = "disable";
        button@21 {
            label = "GPIO Key UP";
            linux,code = <103>;
            gpios = <&gpio 28 1>;
        };
    };
};
/*--------------------------------------ZMP110x 片内外设-----------------------------------------*/
&dac {
    /*pinctrl-names = "default";
     pinctrl-0 = <&speak_pins>;
    
    ** speak-down,linein-detect,hp-mute,hp-detect
    ** 1 means enable these four function
    ** 0 means disable these four function
    */
    speak-down = <1>;
    linein-detect = <0>;
    hp-mute = <0>;
    hp-detect = <0>;
    speak-gpios = <&gpio 97 1>;
    /*the level of speak-gpios votage for power on audio: 0=low, 1=high*/
    speak-gpios-en = <1>;
    //linein-gpios = <&gpio 54 1>;    
    status = "okay";
};

&encrypt{
   /*
    * encrypt-mode
    * 0 = CRYPTO_SINGLE_GROUP_MODE ; 1 = CRYPTO_MULTI_GROUP_MODE
    */
    encrypt-mode = <1>;
    status = "okay";
};

&gui {
    status = "okay";
};

&rtc {
	/*
	 * rtc osc_source_select, 1 means INTERNAL RC OSC, 0 means EXTERNAL XTAL
	 * if internal RC OSC is used to generate 32KH,time adjustment should be setting.(basic unit: ms)
	 */
	osc-select = <0>;
	//adjust-time = <120000>;
	status = "okay";
};

&saradc{
    /* SAR ADC VREF selection
    * 0:To select AVCC 3.3V as VREF for SAR ADC.
    * 1:To select 3.0V generated from BGR as VREF for SAR ADC.
    */
    vref-select = <0>;
    /*
    * 0:To disable BAT voltage divider. 
    * 1:To enable BAT voltage divider divided by 2.
    */
    battery-divider = <1>;
    /*
    * Sampling number
    * Read the sampling data for N times and then calculate the average value.
    * N ranges from 1 to 7.
    */
     sampling-num = <3>;
     status = "okay";
};

&uart0 {
    pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;
    status = "okay";
};

&usb {
    status = "okay"; 
};

&vdecoder {
    status = "okay";
};

&vencoder {
    status = "okay";
};

&watchdog {
	/*max feed dog time = 357s, default setting time = 10s. */
    def_heartbeat = <10>;
    status = "okay";
};


/*-----------------------------------------------板载外设------------------------------------------------*/
&mmc0 {
    bus-width = <0x8>;
    max-frequency = <120000000>;
    non-removable;
    cap-mmc-highspeed;
    pinctrl-names = "default";
    pinctrl-0 = <&mci0_pins>;
    status = "okay";
};

/* data[0:1]线和csi的[RST:EN]引脚复用
&mmc1 {
    bus-width = <0x4>;
    max-frequency = <120000000>;
    non-removable;
    cap-sd-highspeed;
    pinctrl-names = "default";
    pinctrl-0 = <&mci1_pins>;
    status = "okay";
};
 */
&mmc2 {
    #address-cells = <1>;
	#size-cells = <0>;
    bus-width = <0x4>;
    max-frequency = <50000000>;
    non-removable;
    cap-sd-highspeed;
    no-1-8-v;
    mmc-pwrseq = <&mmc2_pwrseq>;
    pinctrl-names = "default";
    pinctrl-0 = <&mci2_pins>;
    status = "okay";

    brcmf: wifi@1 {
        reg = <1>;
        brcm,drive-strength = <10>;
        compatible = "brcm,bcm4329-fmac";
    };
};

&spi0 {
    pinctrl-names = "default";
    pinctrl-0 = <&spiflash_pins>;
    cs-gpios = <&gpio 12 1>;
    spi-bus-frequency = <80000000>;
    /*
     * cap-spi-highspeed;
     * if defined, means high speed controller(Maximum 80M/s);
     * if not, means normal speed controller(below 60M/s)
     */
    cap-spi-highspeed;
    status = "okay";
};
&spif0 {
	/* spi flash data bus width:
	** 1 means 1 wire mode.
	** 2 means 2 wire mode
	** 4 means 4 wire mode.
	** default: 4 wire mode.
	**/
	bus-width = <4>;
	status = "okay";
};
&is25lp064 {
    status = "okay";
};

&i2c0 {
    pinctrl-names = "default";
    pinctrl-0 = <&i2c0_pins>;

    clock-frequency = <312000>;
    //clock-frequency = <117000>;
    sda-delay = <100>;
    status = "okay";
	#address-cells = <1>;
	#size-cells = <0>;

    /* ov7725 */
	sensor0: camera@21 {
		compatible = "zmp,sensor0";
		reg = <0x21>;
	    pinctrl-names = "default";
        pinctrl-0 = <&sensor0_pins>;
		reset-gpio = <&gpio 45 1>;
		pwdn-gpio = <&gpio 46 0>;
        status = "okay";
		port {
			sensor0_0: endpoint@0 {
				remote-endpoint = <&vi_0_0>;
			};
		};
	};
};


&ethernet {
    pinctrl-names = "default";
    pinctrl-0 = <&ethernet_pins_rmii>;
    // pinctrl-0 = <&ethernet_pins_rmii &phy_reset_pins>;
    // reset-gpios = <&gpio 76 1>;
    // mac-address = [00 04 9F 01 1B B0];
    status = "okay";
};

&lcdc {
    pinctrl-names = "default";
    //pinctrl-0 = <&lcd_reset_pins>; //lcd_pins for rgb lcd, lcd_reset_pins only for mipi lcd
    pinctrl-0 = <&lcd_pins>;
    
    lcd-logo-width = <570>;
    lcd-logo-height = <212>;
    //[fmt1:fmt0] 00 16bits input(RGB565 or BGR565)
    //[fmt1:fmt0] 01 24bits input(RGB888 or BGR888)
    //[fmt1:fmt0] 10 or 11 32bits input(ARGB888 ABGR888 RGBA888 BGRA888)
    lcd-logo-fmt0 = <1>;
    lcd-logo-fmt1 = <0>;
    lcd-rgb-bg-color = <0xffffffff>;
    lcd-logo-rgb-seq = <1>; //0 for BGR, 1 for RGB  -> output seq ;use for framebuffer rgbseq
    
    lcd-fb-type = <0>; //0:single buffer; 1:double buffer

    status = "okay";
};

&tm070rdh13 {
    status = "okay";
};

&vi0{
	pinctrl-names = "dvp0_12bits", "dvp0_10bits", "dvp0_8bits",
		"mipi0_2lane", "mipi0_1lane", "mipi1_2lane", "mipi1_1lane",
		"csi0_sclk", "csi1_sclk";
    pinctrl-0 = <&dvp0_12bits_pins>;
    pinctrl-1 = <&dvp0_10bits_pins>;
    pinctrl-2 = <&dvp0_8bits_pins>;
    pinctrl-3 = <&mipi0_2lane_pins>;
    pinctrl-4 = <&mipi0_1lane_pins>;
    pinctrl-5 = <&mipi1_2lane_pins>;
    pinctrl-6 = <&mipi1_1lane_pins>;
    pinctrl-7 = <&csi0_sclk_pin>;
    pinctrl-8 = <&csi1_sclk_pin>;
    status = "okay";
	port@0 {
		#address-cells = <1>;
		#size-cells = <0>;

		vi_0_0: endpoint@0 {
			reg = <0>;
			remote-endpoint = <&sensor0_0>;
		};
        /*
		vi_0_1: endpoint@0 {
			reg = <0>;
			remote-endpoint = <&sensor0_1>;
		};*/
	};
};


&gpio {
    /* zmp,function sharepin func index according to table 2-1 sharepin-list */
    /* index: 0: PIN default func, 1: FUNCTION1, 2: FUNCTION2, 3: FUNCTION3, 4: FUNCTION4 */
    /* zmp,pull config value bit[31:24]--slew rate, bit[23:16]--ie, bit[15:8]--drive, bit[7:0]--pupd config */
    /* bit[31:24]--slew rate, 0: slow, 1: fast */
    /* bit[23:16]--ie, input enable, 0: disable, 1: enable */
    /* bit[15:8]--drive, drive strength, 4levels value: 0x0-0x3 */
    /* bit[7:0]--bit[7]: open drain 0:disable, 1:enable (only for gpio31/32);
				pupd config, bit[6:4] 1:enable/ 0:disable, bit[3:0] 0:select PU /1:select PD */   

    gpio_keys: gpio_keys {
	    zmp,pins = <28>;
	    zmp,function = <0>;
        zmp,pull = <0x01010011>;
    };

    run_led_pins: run_led_pins {
	    zmp,pins = <3>;
	    zmp,function = <0>;
        zmp,pull = <0x01000310>;/* 上拉输出 */
    };

    sdio_wifi_rst_pins:mmc_power_pins{
        zmp,pins = <98>;
	    zmp,function = <0>;
        zmp,pull = <0x01010310>;
    };

    i2c0_pins: i2c0_pins {
        zmp,pins = <31 32>;
        zmp,function = <1>;
        zmp,pull = <0x01010380>;/* i2c0的引脚改为开漏输出 */
    };

    mci0_pins: mci0_pins {
        zmp,pins = <33 34 35 36 37 38 39 40 41 42>;
        zmp,function = <1>;
        zmp,pull = <0x10010 0x10010 0x10010 0x10010 0x10010 0x10010 0x10010 0x10010 0x10010 0x10010>;/* 8 line */ 
    };

    mci1_pins: mci1_pins {
        zmp,pins = <43 44 45 46 47 48>;
        zmp,function = <1>;
        zmp,pull = <0x10010 0x10000 0x10010 0x10010 0x10010 0x10010>; /* 4 line */
    };

    mci2_pins: mci2_pins {
        zmp,pins = <91 92 93 94 95 96>;
        zmp,function = <2 2 3 3 3 3>;
        zmp,pull = <0x01010010 0x01010010 0x01010010 0x01010010 0x01010010 0x01010010>;
    };

    spiflash_pins: spiflash_pins {
        zmp,pins = <12 67 68 69 70>; /* 4 LINE mode, 12 is spi nor cs*/
        zmp,function = <1 0 0 0 0>;
        zmp,pull = <0x01010010>;
    };

    lcd_pins: lcd_pins {
        zmp,pins = <71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90>;
        zmp,function = <1>;
        zmp,pull = <0x01010310>;
    };
				
    /*speak_en and linein_detect gpio setting */
    speak_pins: speak_pins {
        zmp,pins = <97>; 
        zmp,function = <0>;
        zmp,pull = <0x01010010>;
    };
    
    uart0_pins: uart0_pins {
        zmp,pins = <1 2>;
        zmp,function = <1>;
        zmp,pull = <0x01010010>;
    };

    ethernet_pins_rmii: ethernet_pins_rmii {
		zmp,pins 		= <10 11 13 14 15 19 20 23 24 49>;
        zmp,function 	= <1>;
        zmp,pull = <0x01010011 0x01010010 0x01010011 0x01010011 0x01010011 0x01010011 0x01010011 0x01010011 0x01010011 0x01010110>;
    };

    /* camera相关 */
    dvp0_12bits_pins: dvp0_12bits_pins {
        zmp,pins = <25 26 27 28 111 112 113 114 115 116 117 118 119 120 121 122>;
        zmp,function = <1>;
        zmp,pull = <0x01010310>;
    };

    dvp0_10bits_pins: dvp0_10bits_pins {
        zmp,pins = <25 26 27 28 111 112 113 114 115 116 117 118 119 120 121 122>;
        zmp,function = <1>;
        zmp,pull = <0x01010310>;
    };

    dvp0_8bits_pins: dvp0_8bits_pins {
        zmp,pins = <25 26 27 28 111 112 113 114 115 116 117 118 119 120 121 122>;
        zmp,function = <1>;
        zmp,pull = <0x01010310>;
    };

    mipi0_2lane_pins: mipi0_2lane_pins {
        zmp,pins = <25 111 112 113 114 115 116>;
        zmp,function = <1 2 2 2 2 2 2>;
        zmp,pull = <0x01010310>;
    };

    mipi0_1lane_pins: mipi0_1lane_pins {
        zmp,pins = <25 111 112 113 114>;
        zmp,function = <1 2 2 2 2>;
        zmp,pull = <0x01010310>;
    };

    mipi1_2lane_pins: mipi1_2lane_pins {
        zmp,pins = <26 117 118 119 120 121 122>;
        zmp,function = <1 2 2 2 2 2 2>;
        zmp,pull = <0x01010310>;
    };

    mipi1_1lane_pins: mipi1_1lane_pins {
        zmp,pins = <26 117 118 119 120>;
        zmp,function = <1 2 2 2 2>;
        zmp,pull = <0x01010310>;
    };

    csi0_sclk_pin: csi0_sclk_pin {
        zmp,pins = <25>;
        zmp,function = <1>;
        zmp,pull = <0x01010310>;
    };

    csi1_sclk_pin: csi1_sclk_pin {
        zmp,pins = <26>;
        zmp,function = <1>;
        zmp,pull = <0x01010310>;
    };

    sensor0_pins: sensor0_pins {
        zmp,pins = <45 46>;
	    zmp,function = <0>;
        zmp,pull = <0x01000310 0x01000311>;
    };
};
